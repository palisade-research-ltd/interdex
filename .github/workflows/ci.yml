name: Rust CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0          # Faster clean builds[41]

jobs:
  lint-build-test:
    runs-on: ubuntu-latest

    steps:
      # 1 . Source checkout
      - uses: actions/checkout@v4                      # [1]

      # 2 . Pin exact tool-chain + rustfmt & clippy
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:                                          # [7]
          toolchain: "1.78.0"            # <- lock MSRV / bump intentionally
          components: "rustfmt, clippy"

      # 3 . Smart dependency cache (Cargo registry + target/)
      - uses: Swatinem/rust-cache@v2                   # [41]

      # 4 . Formatting gate
      - name: cargo fmt (check mode)
        run: cargo fmt --all -- --check

      # 5 . Static analysis
      - name: cargo clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings    # [12]

      # 6 . Fast type+borrow checking (no code‐gen)
      - name: cargo check
        run: cargo check --all-targets --all-features

      # 7 . Build (debug): catches cfg/feature errors early
      - name: cargo build
        run: cargo build --all-targets --all-features --verbose

      # 8 . Test suite
      - name: cargo test
        run: cargo test --all-features --verbose

  #––– Optional hardening extras ––––––––––––––––––––––––––––––––––––––

  security-audit:
    name: Security & licence scan
    runs-on: ubuntu-latest
    needs: lint-build-test          # Only audit if code compiles
    steps:
      - uses: actions/checkout@v4

      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "stable"
          components: ""

      - uses: Swatinem/rust-cache@v2     # Re-use the build cache

      - name: cargo audit (vuln DB)
        run: |
          cargo install --locked cargo-audit || true
          cargo audit --deny warnings                               # [21][36]
